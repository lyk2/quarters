Quarters application
	- builds the entire application on the web
	- access different modules to build certain features

	methods:

		startApp (feature)
			- builds the view
			- builds the specific feature provided by the argument

		logout()
			- clears server sided session data
			- redirects to home page


House Management
	- conceals information inregards to housing and roles

	methods:

		houseLookup(userID)
			- returns a list of houseIDs a user is a part of

		houseInfo(houseID)
			- returns information about a house as a JSON object
			- description, users in the house and their roles

		joinHouse(userID, houseID)
			- userID is a part of the house at the corresponding houseID

		leaveHouse(userID, houseID)
			- userID leaves the house at houseID

		updateHouseInformation(userID, houseID)
			-  checks if userID has permission to update houseID

Bulletin Board
	- conceals information in regards to bulletin board

	methods:

		generateBoard(userID, houseID)
			- gets all post relevant for the user

		displayPost(obj)
			- generates corresponding html for the post and enables all functionality

		createPost(obj)
			- adds post information to the database
			- calls display post to display information

		deletePost(postId)
			- removes postID from database

		addComment(obj, postID)
			- adds comment to postID

		removeComment(commentID)
			- removes comment from a post within a database

Calendar
	- conceals information in regards to the calendar
	
	Methods:

		generateCalendar()
			- creates empty calendar html

		populateCalendar(userID, HouseID)
			- populates calendar widgets with events from the database

		createEvent(userId,HouseID, Obj)
			- creates event with data constructed in the object argument
			- data is pushed to the database


Financial:
	- conceals information in regards to the financial system

	Methods:	
		
		getFinancialInfo(userid, houseID)
			- get all financial information for userid at houseID that has not been completed yet

		display([])
			- genereates html and creates proper event bindings for each financial item in the argument array
			- bind click event on each financial module, that opens a window

		update(fID, userID)
			- updates information in regards to the financial object by userID
			- includes comments, details, and status

		newFinacial(userid, houseID, {})
			- creates a new finance entry in the database and updates the view to reflect it
			- information will be based throught the object argument

Ticketing System:
	- contains all the methods used to display and manage the ticketing system

	Methods:
		getTicketing(houseID)
			- get all ticket information for userid at houseID

		display([])
			- genereates html and creates proper event bindings for each financial item in the argument array
			- bind click event on each ticket module, that opens a window

		update(ticketID, userID, houseID)
			- updates information in regards to the ticket object by userID
			- includes comments, details, and status

		newTicket(userid, houseID, {})
			- creates a new ticket entry in the database and updates the view to reflect it
			- information will be based throught the object argument

Notification:
	- incapsulates methods for notifications

	methods:

		display([])
			- generates html elements and event bindings for notifications
			- populates the list using the array arugment

		getNotification(userID, HouseID)
			- gets latest (15) notifications from the database

		updateStatus([notificationID])
			- updates the statuses of the noticiations (seen, unseen)


